/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.CardLayout;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import logic.DataWriter;
import util.Config;

/**
 *
 * @author root
 */
public class Builder extends javax.swing.JFrame {

    MainJPanel mainJPanel;
    TestConnectionJPanel testConnectionJPanel;
    private String fpath;

    int counter = 0;
    int cardsLength = 0;
    List<String> componentsList = new ArrayList();
    static Connection con;
    static HashMap<String, String> hashMap;
    ConnectionInterface connectionInterface;

    // prev next
    private final List<String> list = new ArrayList<>();
    private int index = 0;
    static String error;
    RDBMSIface rDBMSIface;

    /**
     * Creates new form Builder
     */
    public Builder() {
        initComponents();
        setLocationRelativeTo(null);
        mainJPanel = MainJPanel.getInstance();
        testConnectionJPanel = new TestConnectionJPanel();
        mainJPanel.setjCheckBoxMenuItemTimeBased(jCheckBoxMenuItemTimeBased);
        mainJPanel.setjCheckBoxMenuItemMySQL(jCheckBoxMenuItemMySQL);
        mainJPanel.setjCheckBoxMenuItemMSSQL(jCheckBoxMenuItemMSSQL);
        mainJPanel.setjCheckBoxMenuItemOracle(jCheckBoxMenuItemOracle);
        mainJPanel.setjMenuItem5(jMenuItem5);
        mainJPanel.setjCheckBoxMenuItem1(jCheckBoxMenuItem1);
        mainJPanel.setjCheckBoxMenuItem2(jCheckBoxMenuItem2);
        mainJPanel.setjMenuItem4(jMenuItem4);
        mainJPanel.setjMenuItem1(jMenuItem1);
        mainJPanel.setjMenuItemSave(jMenuItemSave);
        mainJPanel.setjMenuItem3(jMenuItem3);
        setTitle("Arcsight Helper");
        jCheckBoxMenuItem1.setVisible(false);
        jCheckBoxMenuItem2.setVisible(false);
        jMenuItem1.setVisible(false);
        rDBMSIface = testConnectionJPanel;
        

        displayGui();

    }

//    public void setConnectionInterface(ConnectionInterface connectionInterface) {
//        this.connectionInterface = connectionInterface;
//    }
    public static Builder getBuilderInstance() {
        return new Builder();
    }

    private void displayGui() {
        setIconImage(new ImageIcon(getClass().getResource(util.Config.APP_LOGO)).getImage());
        contentPane.setBorder(
                BorderFactory.createEmptyBorder(5, 5, 5, 5));
        contentPane.setLayout(new CardLayout());

        testConnectionJPanel.setName("TestConnection");
        mainJPanel.setName("MainPanel");
        testConnectionJPanel.setName("TestConnection");
        list.add(mainJPanel.getName());
        list.add(testConnectionJPanel.getName());

        index = list.size() - 1;
        contentPane.add(testConnectionJPanel, "TestConnection");
        contentPane.add(mainJPanel, "MainPanel");
    }

    public void nextPanel(String panel) {
        int total = contentPane.getComponents().length;
        if (1 == total) {
            contentPane.remove(0);
            displayGui();
        }
        CardLayout layout = (CardLayout) contentPane.getLayout();
        layout.show(contentPane, panel);
    }

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupRDBMS = new javax.swing.ButtonGroup();
        buttonGroupConnectorType = new javax.swing.ButtonGroup();
        contentPane = new javax.swing.JPanel();
        jButtonNext = new javax.swing.JButton();
        jButtonPrevious = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jCheckBoxMenuItemTimeBased = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemIDBased = new javax.swing.JCheckBoxMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jCheckBoxMenuItemMySQL = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemMSSQL = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemOracle = new javax.swing.JCheckBoxMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout contentPaneLayout = new javax.swing.GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 254, Short.MAX_VALUE)
        );

        jButtonNext.setText("Next");
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jButtonPrevious.setText("Previous");
        jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPreviousActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem4.setText("New");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem1.setText("Load Query");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSave);

        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu3.setText("Connector Type");

        buttonGroupConnectorType.add(jCheckBoxMenuItemTimeBased);
        jCheckBoxMenuItemTimeBased.setSelected(true);
        jCheckBoxMenuItemTimeBased.setText("Time Based");
        jMenu3.add(jCheckBoxMenuItemTimeBased);

        buttonGroupConnectorType.add(jCheckBoxMenuItemIDBased);
        jCheckBoxMenuItemIDBased.setText("ID Based");
        jMenu3.add(jCheckBoxMenuItemIDBased);

        jMenu2.add(jMenu3);

        jMenu4.setText("RDBMS");

        buttonGroupRDBMS.add(jCheckBoxMenuItemMySQL);
        jCheckBoxMenuItemMySQL.setSelected(true);
        jCheckBoxMenuItemMySQL.setText("MySQL");
        jCheckBoxMenuItemMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemMySQLActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItemMySQL);

        buttonGroupRDBMS.add(jCheckBoxMenuItemMSSQL);
        jCheckBoxMenuItemMSSQL.setText("MS SQL");
        jCheckBoxMenuItemMSSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemMSSQLActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItemMSSQL);

        buttonGroupRDBMS.add(jCheckBoxMenuItemOracle);
        jCheckBoxMenuItemOracle.setText("Oracle");
        jCheckBoxMenuItemOracle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemOracleActionPerformed(evt);
            }
        });
        jMenu4.add(jCheckBoxMenuItemOracle);

        jMenu2.add(jMenu4);

        jMenuItem5.setText("Device Details");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);
        jMenu2.add(jSeparator1);

        jCheckBoxMenuItem1.setText("Load From Table");
        jCheckBoxMenuItem1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem1ItemStateChanged(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem1);

        jCheckBoxMenuItem2.setText("Load From SQL Statement");
        jCheckBoxMenuItem2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem2ItemStateChanged(evt);
            }
        });
        jMenu2.add(jCheckBoxMenuItem2);

        jMenuBar1.add(jMenu2);

        jMenu6.setText("More");

        jMenuItem6.setText("About");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(456, 456, 456)
                .addComponent(jButtonPrevious, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addGap(38, 38, 38)
                .addComponent(jButtonNext, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addGap(426, 426, 426))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPrevious)
                    .addComponent(jButtonNext))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(211, 211, 211))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        mainJPanel.setFileName(); // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                final QueryDialog dialog = new QueryDialog(new javax.swing.JFrame(), "Load Query");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.dispose();
                    }
                });
                dialog.setIconImage(new ImageIcon(getClass().getResource("/images/logo.png")).getImage());
                dialog.setLocationRelativeTo(null);
                dialog.setVisible(true);
            }
        });
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveActionPerformed

        String content = mainJPanel.getjEditorPaneOutput().getText();
        
        if (content.length() > 0) {
            logic.DataWriter dataWriter = new DataWriter();

            if (mainJPanel.getFilePath() == null) {
                String fname = mainJPanel.getConnector().contains("custom.sdktbdatabase") ? "custom.sdktbdatabase.properties" : "custom.sdkibdatabase.properties";
                fpath = util.Util.userHome.replace("\\", "/") + "Documents/FileWriter/" + fname;
                dataWriter.saveContent(fpath, content);
                mainJPanel.getjLabelOutput1().setText("<html><p>File Saved:</p></br><p>" + fpath + "</p></html>");
            } else {
                dataWriter.saveContent(mainJPanel.getFilePath(), content);
                mainJPanel.getjLabelOutput1().setText("<html><p>File Saved:</p></br><p>" + mainJPanel.getFilePath() + "</p></html>");
            }
            mainJPanel.viewFile();
        } else {
            //save for the first time
            mainJPanel.save();
            mainJPanel.viewFile();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemSaveActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        mainJPanel.setVendorDetails();// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jCheckBoxMenuItem1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ItemStateChanged
        if (jCheckBoxMenuItem1.isSelected()) {
            String source = "table";
            mainJPanel.loadInDatabase(source);
        } else {
        }
    }//GEN-LAST:event_jCheckBoxMenuItem1ItemStateChanged

    private void jCheckBoxMenuItem2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ItemStateChanged
        if (jCheckBoxMenuItem2.isSelected()) {
            String source = "sql";
            mainJPanel.loadInDatabase(source);
        } else {
        }// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItem2ItemStateChanged

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        if (testConnectionJPanel.isConnection()) {
            if (++index == list.size()) {
                index = 0;
            }
            navigate();
        } else {
            JOptionPane.showMessageDialog(this, "Connection Not Successful\n"+error,"Authentication Error",JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/images/error.png")));
        }
    }//GEN-LAST:event_jButtonNextActionPerformed

    private void jButtonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousActionPerformed
        if (testConnectionJPanel.isConnection()) {
            if (--index < 0) {
                index = list.size() - 1;
            }
            navigate();
        } else {
            JOptionPane.showMessageDialog(this, "Connection Not Successful\n"+error,"Authentication Error",JOptionPane.ERROR_MESSAGE, new ImageIcon(getClass().getResource("/images/error.png")));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonPreviousActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        java.awt.EventQueue.invokeLater(() -> {
            final AboutDialog dialog = new AboutDialog(new javax.swing.JFrame(), "About");
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    dialog.dispose();
                }
            });
            dialog.setIconImage(new ImageIcon(getClass().getResource("/images/logo.png")).getImage());
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        });// TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jCheckBoxMenuItemMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemMySQLActionPerformed
        rDBMSIface.setParams(Config.connection_MYSQL,Config.driver_MYSQL);        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItemMySQLActionPerformed

    private void jCheckBoxMenuItemMSSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemMSSQLActionPerformed
        rDBMSIface.setParams(Config.connection_MSSQL,Config.driver_MSSQL);// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItemMSSQLActionPerformed

    private void jCheckBoxMenuItemOracleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemOracleActionPerformed
        rDBMSIface.setParams(Config.connection_Oracle,Config.driver_Oracle);// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItemOracleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Builder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Builder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Builder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Builder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Builder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupConnectorType;
    private javax.swing.ButtonGroup buttonGroupRDBMS;
    private javax.swing.JPanel contentPane;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonPrevious;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemIDBased;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMSSQL;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMySQL;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemOracle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemTimeBased;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private void navigate() {
        String cardName = list.get(index);
        if(null!=con){
            mainJPanel.setConnection(con, hashMap);
        }
        nextPanel(cardName);
    }

    public static class ConnectionClass implements TestConnectionJPanel.ConnectionInterface {

        @Override
        public void setConnection(Connection con, HashMap<String, String> hashMap) {
            Builder.con = con;
            Builder.hashMap = hashMap;
            System.out.println(hashMap);
        }

        @Override
        public void setConnectionError(String error) {
            Builder.error = error; 
        }
    }

    public static interface ConnectionInterface {

        void setConnection(Connection con, HashMap<String, String> hashMap);
    }
    
    public static interface RDBMSIface {

        void setParams(String url,String driver);

    }

}
