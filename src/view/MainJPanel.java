/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Cursor;
import java.awt.Dimension;
import logic.Writer;
import java.io.File;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import util.Config;
import util.DbUtils;
import util.MD3;
import static util.MD3.getMeta;

/**
 *
 * @author root
 */
public class MainJPanel extends javax.swing.JPanel implements util.Util.FileExporter.Listener, Builder.ConnectionInterface {
    List<String[]> data = new ArrayList<>();
    List<String> tokenList = new ArrayList<>();
    List<String> valuesList = new ArrayList<>();
    String filename;
    private String tableName;
    String query;
    String filePath;
    String connector;
    String[] titles = new String[]{
        "Field", "Mapping", "Value"
    };

    public static Iface listener;
    String vendor = "custom_vendor";
    String product = "custom_product";
    private File file;
    String fpath;
    String optionalParameter = "";

    CustomTextField jTextFieldVJDBCUrl = new CustomTextField();
    CustomTextField jTextFieldHost = new CustomTextField();
    CustomTextField jTextFieldDatabase = new CustomTextField();
    CustomTextField jTextFieldUsername = new CustomTextField();
    CustomPasswordField jPasswordField = new CustomPasswordField();
    CustomTextField jTextFieldPort = new CustomTextField();
    CustomTextField jTextFieldTable = new CustomTextField();
    CustomJEditorPane CustomJEditorPaneStatements = new CustomJEditorPane();

    String url = null, host = null, database = null, username = null, password = null, port = null;

    // Variables declaration - do not modify                     
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemIDBased;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMSSQL;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemMySQL;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemOracle;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemTimeBased;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration                   
    private Connection connection;
    java.util.HashMap<String, String> hashMap = null;
    

    /**
     * Creates new form MainJPanel
     */
    public MainJPanel() {
        initComponents();
        jLabelOutput1.setText("");
        emptyTable();
        jLabelRefresh.setVisible(false);
        jLabelRefresh.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        jLabelRefresh.setToolTipText("Refresh");
        
    }

    public void setCon(Connection con, HashMap<String, String> hashMap) {
        this.connection = con;
        //System.out.println("+=+=+=+=+=+=+= "+connection);
    }

    public static MainJPanel getInstance() {

        return new MainJPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonGenerate = new javax.swing.JButton();
        jLabelRefresh = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPaneStatements = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPaneOutput = new javax.swing.JEditorPane();
        jLabel3 = new javax.swing.JLabel();
        jLabelOutput1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        jLabel1.setText("Enter SQL Statement");

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jLabelRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        jLabelRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelRefreshMouseClicked(evt);
            }
        });

        jButton2.setText("Target Folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Field", "Mapping", "Value"
            }
        ));
        jScrollPane4.setViewportView(jTable1);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Col 1", "Col 2", "Col 3", "Col 4"
            }
        ));
        jScrollPane1.setViewportView(jTable2);

        jScrollPane5.setViewportView(jEditorPaneStatements);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jButtonGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelRefresh))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                        .addGap(13, 13, 13))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRefresh)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel1)))
                        .addGap(17, 17, 17)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonGenerate))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jEditorPaneOutput);

        jLabel3.setText("Output");

        jLabelOutput1.setText("-------------------");

        jLabel4.setText("Output");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelOutput1))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 546, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(0, 546, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabelOutput1))
                .addGap(12, 12, 12))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        generateQueryResults();
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    private void jLabelRefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelRefreshMouseClicked
        refreshComponents();
        jLabelRefresh.setVisible(false);

    }//GEN-LAST:event_jLabelRefreshMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //        util.Util.exportToExel(jLabel16, util.Util.getFilePath(), "File", false);
        String filename = getConnectorType();
        util.Util.exportToExel(util.Util.getFilePath(), filename, this, false);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JEditorPane jEditorPaneOutput;
    private javax.swing.JEditorPane jEditorPaneStatements;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelOutput1;
    private javax.swing.JLabel jLabelRefresh;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
        public JCheckBoxMenuItem getjCheckBoxMenuItem1() {
        return jCheckBoxMenuItem1;
    }

    public void setjCheckBoxMenuItem1(JCheckBoxMenuItem jCheckBoxMenuItem1) {
        this.jCheckBoxMenuItem1 = jCheckBoxMenuItem1;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItem2() {
        return jCheckBoxMenuItem2;
    }

    public void setjCheckBoxMenuItem2(JCheckBoxMenuItem jCheckBoxMenuItem2) {
        this.jCheckBoxMenuItem2 = jCheckBoxMenuItem2;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItemIDBased() {
        return jCheckBoxMenuItemIDBased;
    }

    public void setjCheckBoxMenuItemIDBased(JCheckBoxMenuItem jCheckBoxMenuItemIDBased) {
        this.jCheckBoxMenuItemIDBased = jCheckBoxMenuItemIDBased;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItemMSSQL() {
        return jCheckBoxMenuItemMSSQL;
    }

    public void setjCheckBoxMenuItemMSSQL(JCheckBoxMenuItem jCheckBoxMenuItemMSSQL) {
        this.jCheckBoxMenuItemMSSQL = jCheckBoxMenuItemMSSQL;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItemMySQL() {
        return jCheckBoxMenuItemMySQL;
    }

    public void setjCheckBoxMenuItemMySQL(JCheckBoxMenuItem jCheckBoxMenuItemMySQL) {
        this.jCheckBoxMenuItemMySQL = jCheckBoxMenuItemMySQL;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItemOracle() {
        return jCheckBoxMenuItemOracle;
    }

    public void setjCheckBoxMenuItemOracle(JCheckBoxMenuItem jCheckBoxMenuItemOracle) {
        this.jCheckBoxMenuItemOracle = jCheckBoxMenuItemOracle;
    }

    public JCheckBoxMenuItem getjCheckBoxMenuItemTimeBased() {
        return jCheckBoxMenuItemTimeBased;
    }

    public void setjCheckBoxMenuItemTimeBased(JCheckBoxMenuItem jCheckBoxMenuItemTimeBased) {
        this.jCheckBoxMenuItemTimeBased = jCheckBoxMenuItemTimeBased;
    }

    public JMenu getjMenu1() {
        return jMenu1;
    }

    public void setjMenu1(JMenu jMenu1) {
        this.jMenu1 = jMenu1;
    }

    public JMenu getjMenu2() {
        return jMenu2;
    }

    public void setjMenu2(JMenu jMenu2) {
        this.jMenu2 = jMenu2;
    }

    public JMenu getjMenu3() {
        return jMenu3;
    }

    public void setjMenu3(JMenu jMenu3) {
        this.jMenu3 = jMenu3;
    }

    public JMenu getjMenu4() {
        return jMenu4;
    }

    public void setjMenu4(JMenu jMenu4) {
        this.jMenu4 = jMenu4;
    }

    public JMenuBar getjMenuBar1() {
        return jMenuBar1;
    }

    public void setjMenuBar1(JMenuBar jMenuBar1) {
        this.jMenuBar1 = jMenuBar1;
    }

    public JMenuItem getjMenuItem1() {
        return jMenuItem1;
    }

    public void setjMenuItem1(JMenuItem jMenuItem1) {
        this.jMenuItem1 = jMenuItem1;
    }

    public JMenuItem getjMenuItem3() {
        return jMenuItem3;
    }

    public void setjMenuItem3(JMenuItem jMenuItem3) {
        this.jMenuItem3 = jMenuItem3;
    }

    public JMenuItem getjMenuItem4() {
        return jMenuItem4;
    }

    public void setjMenuItem4(JMenuItem jMenuItem4) {
        this.jMenuItem4 = jMenuItem4;
    }

    public JMenuItem getjMenuItem5() {
        return jMenuItem5;
    }

    public void setjMenuItem5(JMenuItem jMenuItem5) {
        this.jMenuItem5 = jMenuItem5;
    }

    public JMenuItem getjMenuItemSave() {
        return jMenuItemSave;
    }

    public void setjMenuItemSave(JMenuItem jMenuItemSave) {
        this.jMenuItemSave = jMenuItemSave;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public void setjPanel1(JPanel jPanel1) {
        this.jPanel1 = jPanel1;
    }

    public JPopupMenu.Separator getjSeparator1() {
        return jSeparator1;
    }

    public void setjSeparator1(JPopupMenu.Separator jSeparator1) {
        this.jSeparator1 = jSeparator1;
    }

    public JEditorPane getjEditorPaneOutput() {
        return jEditorPaneOutput;
    }

    public JEditorPane getjEditorPaneStatements() {
        return jEditorPaneStatements;
    }

    public String getFilename() {
        return filename;
    }

    public String getConnector() {
        return connector;
    }

    public String getFpath() {
        return fpath;
    }
    public JLabel getjLabelOutput1() {
        return jLabelOutput1;
    }

    public void setjLabelOutput1(JLabel jLabelOutput1) {
        this.jLabelOutput1 = jLabelOutput1;
    }

    //--------------------------------------------------------------
    public String getFilePath() {
        return filePath;
    }

    @Override
    public void setMessage(String message) {
        filePath = message;
        logic.Writer.setFile(filePath);
    }

    private String getConnectorType() {

        if (filename != null) {
            if (jCheckBoxMenuItemTimeBased.isSelected()) {
                connector = filename + ".sdktbdatabase.properties";

            } else if (jCheckBoxMenuItemIDBased.isSelected()) {
                connector = filename + ".sdkibdatabase.properties";
            }
        } else if (jCheckBoxMenuItemTimeBased.isSelected()) {
            connector = "custom.sdktbdatabase.properties";
        } else if (jCheckBoxMenuItemIDBased.isSelected()) {
            connector = "custom.sdkibdatabase.properties";
        }

        return connector;
    }

    public String RDBMSType() {

        String rdms = null;
        if (jCheckBoxMenuItemMySQL.isSelected()) {
            rdms = "MySQL";
            
        } else if (jCheckBoxMenuItemMSSQL.isSelected()) {
            rdms = "MSSQL";
            
        } else if (jCheckBoxMenuItemOracle.isSelected()) {
            rdms = "Oracle";
            
        }
        
        return rdms;
    }

    private void detectOS() {
        String os = util.Config.OS;
        if (os.equalsIgnoreCase("linux")) {
            jCheckBoxMenuItemMySQL.setSelected(true);
        } else {
            jCheckBoxMenuItemMSSQL.setSelected(true);
        }
    }

    private void generate(String sqlStmt) {
        setColumnNames(sqlStmt);
        listener = new logic.Writer();
        listener.setParams(RDBMSType(), getConnectorType(), tableName, query, vendor, product, optionalParameter, valuesList.toArray(new String[valuesList.size()]));
    }

    private void generateFromHash(String tableName) {
        listener = new Writer();
        listener.setParams(RDBMSType(), getConnectorType(), tableName, query, vendor, product, optionalParameter, valuesList.toArray(new String[valuesList.size()]));
    }

    private void addToTable(String[][] data) {
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                data,
                titles
        ));
        //jTable1.setModel(new CustomTableModel(rows, headers));
        Object options[] = {"timestamp.field", "uniqueid.fields", "event.deviceReceiptTime", "event.destinationAddress", "event.sourceAddress", "event.sourceUserName",
            "event.deviceCustomString1", "event.deviceCustomString2", "event.deviceVendor", "event.deviceProduct"};
        final JComboBox comboBox = new JComboBox(options);

        TableCellEditor editor = new DefaultCellEditor(comboBox);
        TableCellEditor editor1 = new DefaultCellEditor(new JComboBox(valuesList.toArray(new Object[valuesList.size()])));
        jTable1.getColumnModel().getColumn(1).setCellEditor(editor);
        jTable1.getColumnModel().getColumn(2).setCellEditor(editor1);
    }

    private List<Object> getColumnValue(int columnID) {
        List<Object> list = new ArrayList<>();
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            list.add(jTable1.getValueAt(row, columnID));
        }
        return list;
    }

    void setFileName() {

        CustomTextField textField = new CustomTextField();
        Object[] obj = {"Please enter a filename:\n\n", textField};
        Object stringArray[] = {"OK", "Cancel"};
        if (JOptionPane.showOptionDialog(null, obj, "Please Enter filename",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource("/images/logo.png")), stringArray, obj) == JOptionPane.YES_OPTION) {
            filename = textField.getText();

        }
    }

    void setOPtionalParam() {

        CustomTextField textField = new CustomTextField();
        Object[] obj = {"Optional Filter Value:\n", textField};
        Object stringArray[] = {"OK", "Cancel"};
        if (JOptionPane.showOptionDialog(null, obj, "Please enter Optional Parameter Filter"/*"Need password"*/,
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource("/images/logo.png")), stringArray, obj) == JOptionPane.YES_OPTION) {
            optionalParameter = textField.getText();

        }
    }

    void setVendorDetails() {

        CustomTextField textDeviceVendor = new CustomTextField();
        CustomTextField textDeviceProduct = new CustomTextField();
        Object[] obj = {"Please enter Vendor:", textDeviceVendor,
            "Please enter Product:", textDeviceProduct};
        Object stringArray[] = {"OK", "Cancel"};
        if (JOptionPane.showOptionDialog(null, obj, "Please Enter Device Details"/*"Need password"*/,
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource("/images/logo.png")), stringArray, obj) == JOptionPane.YES_OPTION) {
            vendor = textDeviceVendor.getText();
            product = textDeviceProduct.getText();

        }
    }

    public void save() {
        List<Object> mappingList = getColumnValue(1);
        List<Object> valueList = getColumnValue(2);
        try {
            listener = new Writer();
            listener.setParams(RDBMSType(), getConnectorType(), tableName, query, vendor, product, optionalParameter, valuesList.toArray(new String[valuesList.size()]));
            Writer.writeToFile(RDBMSType(), mappingList, valueList);
            if (filePath == null) {
                String fname = connector.contains("custom.sdktbdatabase") ? "custom.sdktbdatabase.properties" : "custom.sdkibdatabase.properties";
                fpath = util.Util.userHome.replace("\\", "/") + "Documents/FileWriter/" + fname;
                jLabelOutput1.setText("<html><p>File Saved:</p></br><p>" + fpath + "</p></html>");
                viewFile();
            } else {
                jLabelOutput1.setText("<html><p>File Saved:</p></br><p>" + filePath + "</p></html>");
                viewFile();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void emptyTable() {
        ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
        ((DefaultTableModel) jTable2.getModel()).setRowCount(0);
    }

    public String getTableName() {
        return tableName;
    }

    public List<String> getValuesList() {
        return valuesList;
    }

    public String getQuery() {
        return query;
    }

    private static String getTableName(String sqlStmt) {
        String name = "";
        String data1 = sqlStmt;
        String data2 = "SELECT name, age FROM schema.table1 whatever";

        Pattern p = Pattern.compile("from\\s+(?:\\w+\\.)*(\\w+)($|\\s+[WHERE,JOIN,START\\s+WITH,ORDER\\s+BY,GROUP\\s+BY])", Pattern.CASE_INSENSITIVE);

//test
        Matcher m = p.matcher(data1);
        while (m.find()) {

            name = m.group(1);
        }
        m = p.matcher(data2);
        while (m.find()) {

        }
        return name;
    }

    private void setColumnNames(String sqlStmt) {
        String subjectString = sqlStmt != null ? sqlStmt : "select eventid, eventtime, username, dstip, srcip, action from events where eventtime";
        Pattern regex = Pattern.compile("\\w+(?=\\s*(?:,|\\bfrom\\b))(?=.*\\bfrom\\b)", Pattern.CASE_INSENSITIVE);
        Matcher regexMatcher = regex.matcher(subjectString);
        try {
            int count = 0;
            for (int i = 0; i < tokenList.size(); i++) {
                if (regexMatcher.find()) {
                    count++;
                    String field = String.valueOf(count);
                    String mapping = tokenList.get(i);
                    String value = regexMatcher.group();
                    List<String> dataList = new ArrayList<>();
                    dataList.add(field);
                    dataList.add(mapping);
                    dataList.add(value);
                    valuesList.add(value);
                    data.add(dataList.toArray(new String[dataList.size()]));
                }
            }
            addToTable(data.toArray(new String[data.size()][data.size()]));
            tableName = getTableName(sqlStmt);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void setColumnNames(java.util.HashMap<String, String> hashMap) {
        int i = 0;
        for (Map.Entry<String, String> entrySet : hashMap.entrySet()) {
            i++;
            String field = String.valueOf(i);
            String key = entrySet.getKey();
            String value = entrySet.getValue();
            List<String> dataList = new ArrayList<>();
            dataList.add(field);
            dataList.add(key);
            dataList.add(value);
            //add token
            tokenList.add(key);
            valuesList.add(value);
            data.add(dataList.toArray(new String[dataList.size()]));

        }
        addToTable(data.toArray(new String[data.size()][data.size()]));
        jMenuItemSave.setEnabled(true);
        jButtonGenerate.setEnabled(false);
        if (getConnectorType().contains("sdktbdatabase")) {
//            setOPtionalParam();
        }

    }

    private void setTableOPtions() {
        Object options[] = {"timestamp.field", "uniqueid.fields", "event.deviceReceiptTime", "event.destinationAddress", "event.sourceAddress", "event.sourceUserName",
            "event.deviceCustomString1", "event.deviceCustomString2", "event.deviceVendor", "event.deviceProduct"};
        for (int i = 0; i <= 8; i++) {
            Object option = options[i];
            tokenList.add(String.valueOf(option));

        }
        final JComboBox comboBox = new JComboBox(options);

        TableCellEditor editor = new DefaultCellEditor(comboBox);

        Object headers[] = {"English", "Japanese", "French"};
        JFrame frame = new JFrame("JTable Anatomy");
        class CustomTableModel extends DefaultTableModel {

            public CustomTableModel(Object rowData[][], Object columnNames[]) {
                super(rowData, columnNames);
            }

            public Class getColumnClass(int col) {
                Vector v = (Vector) dataVector.elementAt(0);
                return v.elementAt(col).getClass();
            }

            public boolean isCellEditable(int row, int col) {
                return true;
            }
        }
    }

    public void loadInDatabase(String source) {
        String os = util.Config.OS;
        if (os.equalsIgnoreCase("linux")) {
            url = Config.connection_MYSQL;
        } else {
            url = Config.connection_MSSQL;
        }
        jTextFieldVJDBCUrl.setText(url);

        JComponent component = null;
        String cTitle = null;
        if (source.equalsIgnoreCase("table")) {
            component = jTextFieldTable;
            cTitle = "Table:";
        } else {
            component = CustomJEditorPaneStatements;
            component.setPreferredSize(new Dimension(400, 100));
            cTitle = "SQL Statement:";
        }

        Object[] obj = {"JDBC URL:", jTextFieldVJDBCUrl,
            "Host:", jTextFieldHost,
            "Database:", jTextFieldDatabase,
            "Username:", jTextFieldUsername,
            "Password:", jPasswordField,
            "Port:", jTextFieldPort,
            cTitle, component};
        Object stringArray[] = {"OK", "Cancel"};
        if (JOptionPane.showOptionDialog(null, obj, "Please Enter Device Details"/*"Need password"*/,
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource("/images/logo.png")), stringArray, obj) == JOptionPane.YES_OPTION) {
            host = jTextFieldHost.getText();
            database = jTextFieldDatabase.getText();
            username = jTextFieldUsername.getText();
            password = jPasswordField.getText();
            port = jTextFieldPort.getText();
            String table = jTextFieldTable.getText();

            util.Config.host = host;
            util.Config.databaseName = database;
            util.Config.user = username;
            util.Config.password = password;

            String rdbms = RDBMSType();
            java.util.HashMap<String, String> hashMap = null;

            if (source.equalsIgnoreCase(
                    "table")) {
                tableName = table;
                hashMap = getMeta(connection, table, rdbms);
                setColumnNames(hashMap);
                generateFromHash(table);
                populateTable();
            } else if (null != ((JEditorPane) component).getText()) {

                query = ((JEditorPane) component).getText().replace("[", "").replace("]", "").replace("`", "").replaceAll("[\\\t|\\\n|\\\r]", " ");
                tableName = DbUtils.getTableName(query);
                hashMap = MD3.getMetaFromSQL(connection, query, rdbms);
                setColumnNames(hashMap);
                generateFromHash(table);
                populateTable(query);
            }

        }

    }

    private void generateQueryResults() {
        if (jEditorPaneStatements.getText().length() > 0) {
            if (tokenList.size() > 0) {
                jMenuItemSave.setEnabled(true);
                jLabelRefresh.setVisible(true);
                util.Config.host = host;
                util.Config.databaseName = database;
                util.Config.user = username;
                util.Config.password = password;

                String rdbms = RDBMSType();
                query = jEditorPaneStatements.getText().replace("[", "").replace("]", "").replace("`", "").replaceAll("[\\\t|\\\n|\\\r]", " ");//"select eventid, eventtime, username, dstip, srcip, action from events where eventtime";
                tableName = DbUtils.getTableName(query);
                hashMap = MD3.getMetaFromSQL(connection, query, rdbms);
                setColumnNames(hashMap);
                generateFromHash(tableName);
                populateTable(query);
                jButtonGenerate.setEnabled(false);
            } else {
                jMenuItemSave.setEnabled(false);
                jLabelRefresh.setVisible(false);
                query = jEditorPaneStatements.getText();
                util.Config.host = host;
                util.Config.databaseName = database;
                util.Config.user = username;
                util.Config.password = password;

                String rdbms = RDBMSType();

                tableName = DbUtils.getTableName(query);
                hashMap = MD3.getMetaFromSQL(connection, query, rdbms);
                setColumnNames(hashMap);

                generateFromHash(tableName);
                populateTable(query);
                jLabelRefresh.setVisible(true);
            }
        } else {
            JOptionPane.showMessageDialog(jTextFieldHost, "Please Enter SQL Statement", "Message", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/images/warning.png")));
        }
    }

    private void refreshComponents() {
        emptyTable();
        jEditorPaneStatements.setText("");
        jEditorPaneOutput.setText("");
        jButtonGenerate.setEnabled(true);
        valuesList.clear();
        tokenList.clear();
        MD3.clearHashMap();
        data.clear();
    }

    public static class CustomTextField extends JTextField {

        public CustomTextField() {
            addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent kEvt) {
                    if (kEvt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        kEvt.consume();
                        try {
                            java.awt.Robot robot = new java.awt.Robot();
                            robot.setAutoDelay(100);
                            robot.keyPress(java.awt.event.KeyEvent.VK_TAB);
                            robot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
                        } catch (java.awt.AWTException awtEx) {
                            awtEx.printStackTrace();
                        }
                    }
                }
            });
        }
    }

    public static class CustomJEditorPane extends JEditorPane {

        public CustomJEditorPane() {
            addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent kEvt) {
                    if (kEvt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        kEvt.consume();
                        try {
                            java.awt.Robot robot = new java.awt.Robot();
                            robot.setAutoDelay(100);
                            robot.keyPress(java.awt.event.KeyEvent.VK_TAB);
                            robot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
                        } catch (java.awt.AWTException awtEx) {
                            awtEx.printStackTrace();
                        }
                    }
                }
            });
        }
    }

    class CustomPasswordField extends JPasswordField {

        public CustomPasswordField() {
            addKeyListener(new java.awt.event.KeyAdapter() {
                @Override
                public void keyPressed(java.awt.event.KeyEvent kEvt) {
                    if (kEvt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                        kEvt.consume();
// auto generate TAB + Enter keypress events
                        try {
                            java.awt.Robot robot = new java.awt.Robot();
                            robot.setAutoDelay(100);
                            robot.keyPress(java.awt.event.KeyEvent.VK_TAB);
                            robot.keyPress(java.awt.event.KeyEvent.VK_ENTER);
                        } catch (java.awt.AWTException awtEx) {
                            awtEx.printStackTrace();
                        }
                    }
                }
            });
        }
    }

    public static interface EventsListener {

        void setTable(String query);

        void setRDBMS(String RDBMS);

        void setFields(String[] fields);

    }

    void viewFile() {
        if (filePath == null) {
            String fname = connector.contains("custom.sdktbdatabase") ? "custom.sdktbdatabase.properties" : "custom.sdkibdatabase.properties";
            fpath = util.Util.userHome.replace("\\", "/") + "Documents/FileWriter";
            file = new File(util.Util.FileExporter.createFileIfNotExists(util.Util.FileExporter.createDirIfNotExists(fpath), fname));
            jLabelOutput1.setText("<html><p>File Saved:</p></br><p>" + fpath + "/" + fname + "</p></html>");
        } else {
            file = new File(filePath);
        }
        try {
            jEditorPaneOutput.setPage(file.toURI().toURL());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //----------------------------------------------------
    @Override
    public void setConnection(Connection con, HashMap<String, String> hashMap) {
        this.connection = con;
        host = (String) hashMap.get("host");
        database = (String) hashMap.get("database");
        username = (String) hashMap.get("username");
        password = (String) hashMap.get("password");
        port = (String) hashMap.get("port");
    }

    private String gn() {
        return username;
    }

    public void setTableName(String tableName) {
        this.tableName = tableName;

    }

//    private void emptyTable() {
//        ((DefaultTableModel) jTable1.getModel()).setRowCount(0);
//    }
    public String getTableParam() {

        MainJPanel.CustomTextField textField = new MainJPanel.CustomTextField();
        Object[] obj = {"Table name:\n", textField};
        Object stringArray[] = {"OK", "Cancel"};
        if (JOptionPane.showOptionDialog(null, obj, "Please Enter Table name",
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, new ImageIcon(getClass().getResource("/images/logo.png")), stringArray, obj) == JOptionPane.YES_OPTION) {
            //tableName = textField.getText();

        } else {
            emptyTable();
        }
        //System.err.println("Pass **"+password);
        return textField.getText();
    }

    public void populateTable() {
        try {
            if (connection != null) {
                String sql = "SELECT * FROM " + tableName;
                ResultSet rs = connection.createStatement().executeQuery(sql);
                TableModel model = util.DbUtils.resultSetToTableModel(rs);
                jTable2.setModel(model);
            } else {
                emptyTable();
            }

        } catch (SQLException ex) {
            //ex.printStackTrace();
            System.err.println("No connections " + ex.getMessage());
        }
    }

    public void populateTable(String sql) {
        try {
            if (connection != null) {
                ResultSet rs = connection.createStatement().executeQuery(sql);
                TableModel model = util.DbUtils.resultSetToTableModel(rs);
                jTable2.setModel(model);
            } else {
                emptyTable();
            }

        } catch (SQLException ex) {
            //ex.printStackTrace();
            System.err.println("No connections " + ex.getMessage());
        }
    }

    //----------------------------------------------------
    public static interface Iface {

        void setParams(String rdbms, String connectorType, String tableName, String query, String vendor, String product, String optionalParam, String[] fields);

    }
    
    
}
